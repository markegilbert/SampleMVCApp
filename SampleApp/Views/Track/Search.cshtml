@using Microsoft.AspNetCore.Mvc.Routing
@model SampleApp.Models.TrackSearchModel
@{
    ViewData["Title"] = "Track Search";
}


<h1>Track Search</h1>

<div class="container">
    <div class="row">
        <div class="col">
            <p>Some example searches that return data:</p>
            <ul>
                <li>Artists: AC/DC, Metallica, Clapton, Tyler</li>
                <li>Tracks: Dog, Place, Land</li>
            </ul>
        </div>
    </div>
    @using (Html.BeginForm("Search", "Track", FormMethod.Post, new { @id = "formID"}))
    {        
        @Html.AntiForgeryToken()
        <div class="form-group row my-1">
            @Html.LabelFor(m => m.TrackName, new { @class = "col-sm-2 col-md-1 col-form-label"})
            <div class="col-sm-10 col-md-4">
                @Html.TextBoxFor(m => m.TrackName, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group row my-1">
            @Html.LabelFor(m => m.ArtistName, new { @class = "col-sm-2 col-md-1 col-form-label" })
            <div class="col-sm-10 col-md-4">
                @Html.TextBoxFor(m => m.ArtistName, new { @class = "form-control" })
            </div>
        </div>
        @* The validation summary is used so that any class-level messages show up. *@
        <div class="invalid-feedback d-block">
            @Html.ValidationSummary()
        </div>
        <input type="submit" value="Search" class="btn btn-primary" />
    }
</div>


@if (Model.Results != null)
{
    <div class="my-5">
        <h2>Search Results</h2>
        <span>Found @Model.NumberOfResults tracks.</span>
        @if (@Model.NumberOfResults > 0)
        {
            <span>(Click for the album art.)</span>
        }
        <ol start="@Model.ResultEnumerationStart">
            @foreach (TrackSearchResultModel CurrentResult in Model.Results)
            {
                <li><a href="#" data-url="@Url.Action("AlbumArt", "Track", new { TrackName = @CurrentResult.TrackName, ArtistName = @CurrentResult.ArtistName })" onclick="onArtDialogClick();">@CurrentResult.TrackName / @CurrentResult.ArtistName</a></li>
            }
        </ol>
        @if (@Model.NumberOfResults > 0)
        {
            <nav aria-label="Search results navigation">
                <ul class="pagination">
                    @if (Model.Page > 1)
                    {
                        <li class="page-item"><a class="page-link" href="?TrackName=@Model.TrackName&ArtistName=@Model.ArtistName&Page=@(Model.Page-1)">Previous</a></li>
                    }
                    else
                    {
                        <li class="page-item disabled"><span class="page-link">Previous</span></li>
                    }

                    @for(int i = 1; i <= Model.NumberOfPages; i++)
                    {
                        <li class="page-item"><a class="page-link" href="?TrackName=@Model.TrackName&ArtistName=@Model.ArtistName&Page=@i">@i</a></li>
                    }

                    @if (Model.Page < Model.NumberOfPages)
                    {
                        <li class="page-item"><a class="page-link" href="?TrackName=@Model.TrackName&ArtistName=@Model.ArtistName&Page=@(Model.Page+1)">Next</a></li>
                    }
                    else
                    {
                        <li class="page-item disabled"><span class="page-link">Next</span></li>
                    }

                </ul>
            </nav>
        }
    </div>
}


<div id="artDialog" class="modal">
    <span id="artDialogClose" class="close">&times;</span>
    <img id="artDialogImage" class="modal-content">
</div>



@section Scripts
{
    <partial name="_ValidationScriptsPartial.cshtml" />

    <script>
        // Adapted from https://stackoverflow.com/questions/19395287/how-to-get-event-target-without-jquery
        function getEventTarget(e) {
            // TODO: event is deprecated; what's the new version?
            e = e || window.event;
            return e.target || e.srcElement;
        }

        async function onArtDialogClick()
        {
            var artDialog = document.getElementById("artDialog");

            // TODO: event is deprecated; what's the new version?
            // Extract the URL from the clicked button
            var target = getEventTarget(event);
            var url = target.dataset.url;


            // Load up the image
            // Adapted from: https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch
            // Adapted from: https://stackoverflow.com/questions/37121301/how-to-check-if-the-response-of-a-fetch-is-a-json-object-in-javascript
            var artDialogImage = document.getElementById("artDialogImage");
            try
            {
                data = await fetch(url);
                artDialogImage.src = await data.text();
            }
            catch (error)
            {
                console.error(error);
            }


            // When the user clicks on <span> (x), close the modal
            //var span = document.getElementsByClassName("close")[0];
            var artDialogClose = document.getElementById("artDialogClose");
            artDialogClose.onclick = function () {
                artDialog.style.display = "none";
            }

            // Now that the model has been configured, open it
            artDialog.style.display = "block";
        }

    </script>
}